/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import {
  Signer,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from 'ethers'

import { Provider, TransactionRequest } from '@ethersproject/providers'

import type { ERC20 } from './ERC20'

export class ERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ERC20> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      overrides || {},
    ) as Promise<ERC20>
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      overrides || {},
    )
  }
  attach(address: string): ERC20 {
    return super.attach(address) as ERC20
  }
  connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: '_from',
        type: 'address',
      },
      {
        indexed: true,
        name: '_to',
        type: 'address',
      },
      {
        indexed: false,
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: '_owner',
        type: 'address',
      },
      {
        indexed: true,
        name: '_spender',
        type: 'address',
      },
      {
        indexed: false,
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    inputs: [
      {
        name: '_name',
        type: 'string',
      },
      {
        name: '_symbol',
        type: 'string',
      },
      {
        name: '_decimals',
        type: 'uint256',
      },
    ],
    outputs: [] as [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_owner',
        type: 'address',
      },
      {
        name: '_spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_to',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_from',
        type: 'address',
      },
      {
        name: '_to',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_spender',
        type: 'address',
      },
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        name: '_value',
        type: 'uint256',
      },
    ],
    name: '_mint_for_testing',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        name: 'arg0',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x6060610627610140396060602061062760c03960c051610627016101a0396040602061062760c03960c05160040135111561003957600080fd5b6040602060206106270160c03960c05161062701610220396020602060206106270160c03960c05160040135111561007057600080fd5b6101a080600060c052602060c020602082510161012060006003818352015b826101205160200211156100a2576100c4565b61012051602002850151610120518501555b815160010180835281141561008f575b50505050505061022080600160c052602060c020602082510161012060006002818352015b826101205160200211156100fc5761011e565b61012051602002850151610120518501555b81516001018083528114156100e9575b5050505050506101805160025561060f56600436101561000d576104d9565b600035601c52600051341561002157600080fd5b6318160ddd8114156100395760055460005260206000f35b63dd62ed3e81141561008d5760043560a01c1561005557600080fd5b60243560a01c1561006557600080fd5b600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b63a9059cbb81141561013e5760043560a01c156100a957600080fd5b60033360e05260c052604060c0208054602435808210156100c957600080fd5b80820390509050815550600360043560e05260c052604060c02080546024358181830110156100f757600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f35b6323b872dd81141561023b5760043560a01c1561015a57600080fd5b60243560a01c1561016a57600080fd5b600360043560e05260c052604060c02080546044358082101561018c57600080fd5b80820390509050815550600360243560e05260c052604060c02080546044358181830110156101ba57600080fd5b80820190509050815550600460043560e05260c052604060c0203360e05260c052604060c0208054604435808210156101f257600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f35b63095ea7b38114156102b45760043560a01c1561025757600080fd5b60243560043360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f35b63ca44180381141561033f57600580546004358181830110156102d657600080fd5b8082019050905081555060033360e05260c052604060c020805460043581818301101561030257600080fd5b80820190509050815550600435610140523360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3005b6306fdde038114156103e45760008060c052602060c020610180602082540161012060006003818352015b8261012051602002111561037d5761039f565b61012051850154610120516020028501525b815160010180835281141561036a575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b6395d89b418114156104895760018060c052602060c020610180602082540161012060006002818352015b8261012051602002111561042257610444565b61012051850154610120516020028501525b815160010180835281141561040f575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b63313ce5678114156104a15760025460005260206000f35b6370a082318114156104d75760043560a01c156104bd57600080fd5b600360043560e05260c052604060c0205460005260206000f35b505b60006000fd5b61013061060f0361013060003961013061060f036000f3'
